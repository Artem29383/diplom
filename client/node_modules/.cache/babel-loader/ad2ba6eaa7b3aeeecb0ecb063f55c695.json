{"ast":null,"code":"var _jsxFileName = \"/Users/artemaveranov/diplom/src/pages/Contact/Form/Form.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport useResolver from \"../../../hooks/useResolver\";\nimport VisualForm from \"./VisualForm\";\nimport { useEffect } from \"react/cjs/react.production.min\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = () => {\n  _s();\n\n  const formSchema = yup.object().shape({\n    name: yup.string().required('Name is required'),\n    email: yup.string().required('Email is required').email('It is not email'),\n    message: yup.string().required('Message is required')\n  });\n  const resolver = useResolver(formSchema);\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset,\n    watch,\n    setValue,\n    clearErrors\n  } = useForm({\n    mode: 'onSubmit',\n    resolver\n  });\n  const name = watch('name');\n  const email = watch('email');\n  const message = watch('message');\n  useEffect(() => {\n    if (errors.email && email.trim()) {\n      clearErrors('email');\n    }\n\n    if (errors.name && name.trim()) {\n      clearErrors('name');\n    }\n\n    if (errors.message && message.trim()) {\n      clearErrors('message');\n    }\n  }, [name, email, message]);\n  useEffect(() => {\n    if (errors.name || errors.message || errors.email) {\n      if (errors.name) {\n        setValue('name', '');\n      }\n\n      if (errors.message) {\n        setValue('message', '');\n      }\n\n      if (errors.email) {\n        setValue('email', '');\n      }\n    }\n  }, [errors.name, errors.message, errors.email]);\n\n  const submit = data => {\n    console.info(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(VisualForm, { ...errors,\n    handleSubmit: handleSubmit,\n    register: register,\n    submit: submit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Form, \"pi3N6i547Ns0SA1DXE85X4nVkGw=\", false, function () {\n  return [useResolver, useForm];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/artemaveranov/diplom/src/pages/Contact/Form/Form.jsx"],"names":["React","useForm","yup","useResolver","VisualForm","useEffect","Form","formSchema","object","shape","name","string","required","email","message","resolver","register","handleSubmit","errors","reset","watch","setValue","clearErrors","mode","trim","submit","data","console","info"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport useResolver from \"../../../hooks/useResolver\";\nimport VisualForm from \"./VisualForm\";\nimport { useEffect } from \"react/cjs/react.production.min\";\n\nconst Form = () => {\n  const formSchema = yup.object().shape({\n    name: yup.string().required('Name is required'),\n    email: yup\n      .string()\n      .required('Email is required')\n      .email('It is not email'),\n    message: yup.string().required('Message is required'),\n  });\n\n  const resolver = useResolver(formSchema);\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset,\n    watch,\n    setValue,\n    clearErrors,\n  } = useForm({\n    mode: 'onSubmit',\n    resolver,\n  });\n\n  const name = watch('name');\n  const email = watch('email');\n  const message = watch('message');\n\n  useEffect(() => {\n    if (errors.email && email.trim()) {\n      clearErrors('email');\n    }\n    if (errors.name && name.trim()) {\n      clearErrors('name');\n    }\n    if (errors.message && message.trim()) {\n      clearErrors('message');\n    }\n  }, [name, email, message]);\n\n  useEffect(() => {\n    if (errors.name || errors.message || errors.email) {\n      if (errors.name) {\n        setValue('name', '');\n      }\n      if (errors.message) {\n        setValue('message', '');\n      }\n      if (errors.email) {\n        setValue('email', '');\n      }\n    }\n  }, [errors.name, errors.message, errors.email]);\n\n  const submit = data => {\n    console.info(data)\n  }\n\n  return (\n    <VisualForm\n      {...errors}\n      handleSubmit={handleSubmit}\n      register={register}\n      submit={submit}\n    />\n  );\n};\n\nexport default Form;"]},"metadata":{},"sourceType":"module"}